// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OfflineTicketingSystemAPI.Data;

#nullable disable

namespace OfflineTicketingSystemAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250806053508_SeedTickets")]
    partial class SeedTickets
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("OfflineTicketingSystemAPI.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AssignedToUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e5ac745-171a-48c9-a8ff-7af416ace6da"),
                            CreatedAt = new DateTime(2025, 8, 6, 5, 35, 7, 459, DateTimeKind.Utc).AddTicks(8192),
                            CreatedByUserId = new Guid("2f6f2733-0745-4fe7-9291-91d6c3bc8e39"),
                            Description = "The application is unable to connect to the production database.",
                            Priority = 2,
                            Status = 0,
                            Title = "Fix database connection issue",
                            UpdatedAt = new DateTime(2025, 8, 6, 5, 35, 7, 459, DateTimeKind.Utc).AddTicks(8194)
                        },
                        new
                        {
                            Id = new Guid("2715a263-b102-4095-b024-9de11732d995"),
                            AssignedToUserId = new Guid("eeba8aae-f6b8-46c9-99cc-05446790868f"),
                            CreatedAt = new DateTime(2025, 8, 6, 4, 35, 7, 459, DateTimeKind.Utc).AddTicks(8203),
                            CreatedByUserId = new Guid("2f6f2733-0745-4fe7-9291-91d6c3bc8e39"),
                            Description = "A new feature is required for the user dashboard.",
                            Priority = 1,
                            Status = 1,
                            Title = "Add new feature request",
                            UpdatedAt = new DateTime(2025, 8, 6, 5, 35, 7, 459, DateTimeKind.Utc).AddTicks(8218)
                        });
                });

            modelBuilder.Entity("OfflineTicketingSystemAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eeba8aae-f6b8-46c9-99cc-05446790868f"),
                            Email = "admin@test.com",
                            FullName = "Admin User",
                            PasswordHash = "jJCcbUJ6yUfZdRTTS9O5QDX9SDB7mHg9E42zC4MwiU4=",
                            Role = 1
                        },
                        new
                        {
                            Id = new Guid("2f6f2733-0745-4fe7-9291-91d6c3bc8e39"),
                            Email = "employee@test.com",
                            FullName = "Employee User",
                            PasswordHash = "jJCcbUJ6yUfZdRTTS9O5QDX9SDB7mHg9E42zC4MwiU4=",
                            Role = 0
                        });
                });

            modelBuilder.Entity("OfflineTicketingSystemAPI.Models.Ticket", b =>
                {
                    b.HasOne("OfflineTicketingSystemAPI.Models.User", "AssignedToUser")
                        .WithMany("AssignedTickets")
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("OfflineTicketingSystemAPI.Models.User", "CreatedByUser")
                        .WithMany("CreatedTickets")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedToUser");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("OfflineTicketingSystemAPI.Models.User", b =>
                {
                    b.Navigation("AssignedTickets");

                    b.Navigation("CreatedTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
